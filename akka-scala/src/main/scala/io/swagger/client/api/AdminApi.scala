/**
 * NOTE: This class is auto generated by the akka-scala (beta) swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * For any issue or feedback, please open a ticket via https://github.com/swagger-api/swagger-codegen/issues/new
 */
package io.swagger.client.api

import io.swagger.client.model.ApiResponse
import io.swagger.client.model.Customer
import io.swagger.client.model.Customers
import io.swagger.client.model.Device
import io.swagger.client.model.Devices
import io.swagger.client.model.Permissions
import io.swagger.client.model.Role
import io.swagger.client.model.Roles
import java.util.UUID
import io.swagger.client.model.User
import io.swagger.client.model.Users
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object AdminApi {

  /**
   * Add users to this role
   * 
   * Expected answers:
   *   code 404 :  (Role not found)
   *   code 200 :  (response)
   * 
   * @param roleId 
   */
  def adminAddRoleUsers(roleId: UUID): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://virtserver.swaggerhub.com/XQDEV/smartcare/1.0.0", "/admin/roles/{role_id}/users", "application/json")
      .withPathParam("role_id", roleId)
      .withErrorResponse[Unit](404)
      .withSuccessResponse[Unit](200)
        /**
   * Register a new device
   * 
   * Expected answers:
   *   code 200 : Devices (response)
   * 
   * @param skip Amount of customers to skip
   * @param limit Maximum amount of customers to get
   */
  def adminCreateDevice(skip: Option[Int] = None, limit: Option[Int] = None): ApiRequest[Devices] =
    ApiRequest[Devices](ApiMethods.POST, "https://virtserver.swaggerhub.com/XQDEV/smartcare/1.0.0", "/admin/devices", "application/json")
      .withQueryParam("skip", skip)
      .withQueryParam("limit", limit)
      .withSuccessResponse[Devices](200)
        /**
   * Create or update permissions of a role
   * 
   * Expected answers:
   *   code 404 :  (Role not found)
   *   code 200 :  (response)
   * 
   * @param roleId 
   * @param permissions 
   */
  def adminCreateOrUpdateRolePermissions(roleId: UUID, permissions: Seq[Permissions]): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.PUT, "https://virtserver.swaggerhub.com/XQDEV/smartcare/1.0.0", "/admin/roles/{role_id}/permissions", "application/json")
      .withBody(permissions)
      .withPathParam("role_id", roleId)
      .withErrorResponse[Unit](404)
      .withSuccessResponse[Unit](200)
        /**
   * Delete a customer
   * 
   * Expected answers:
   *   code 404 :  (Customer not found)
   *   code 200 : ApiResponse (response)
   * 
   * @param customerId 
   */
  def adminDeleteCustomer(customerId: UUID): ApiRequest[ApiResponse] =
    ApiRequest[ApiResponse](ApiMethods.DELETE, "https://virtserver.swaggerhub.com/XQDEV/smartcare/1.0.0", "/admin/customers/{customer_id}", "application/json")
      .withPathParam("customer_id", customerId)
      .withErrorResponse[Unit](404)
      .withSuccessResponse[ApiResponse](200)
        /**
   * Delete a device
   * 
   * Expected answers:
   *   code 404 :  (Device not found)
   *   code 200 : ApiResponse (response)
   * 
   * @param deviceId 
   */
  def adminDeleteDevice(deviceId: UUID): ApiRequest[ApiResponse] =
    ApiRequest[ApiResponse](ApiMethods.DELETE, "https://virtserver.swaggerhub.com/XQDEV/smartcare/1.0.0", "/admin/devices/{device_id}", "application/json")
      .withPathParam("device_id", deviceId)
      .withErrorResponse[Unit](404)
      .withSuccessResponse[ApiResponse](200)
        /**
   * Delete a role
   * 
   * Expected answers:
   *   code 404 :  (Role not found)
   *   code 200 : ApiResponse (response)
   * 
   * @param roleId 
   */
  def adminDeleteRole(roleId: UUID): ApiRequest[ApiResponse] =
    ApiRequest[ApiResponse](ApiMethods.DELETE, "https://virtserver.swaggerhub.com/XQDEV/smartcare/1.0.0", "/admin/roles/{role_id}", "application/json")
      .withPathParam("role_id", roleId)
      .withErrorResponse[Unit](404)
      .withSuccessResponse[ApiResponse](200)
        /**
   * Delete a user
   * 
   * Expected answers:
   *   code 404 :  (User not found)
   *   code 200 : ApiResponse (response)
   * 
   * @param userId 
   */
  def adminDeleteUser(userId: UUID): ApiRequest[ApiResponse] =
    ApiRequest[ApiResponse](ApiMethods.DELETE, "https://virtserver.swaggerhub.com/XQDEV/smartcare/1.0.0", "/admin/users/{user_id}", "application/json")
      .withPathParam("user_id", userId)
      .withErrorResponse[Unit](404)
      .withSuccessResponse[ApiResponse](200)
        /**
   * Gets a single customer by its customer id
   * 
   * Expected answers:
   *   code 404 :  (Customer not found)
   *   code 200 : Customer (response)
   * 
   * @param customerId 
   */
  def adminGetCustomer(customerId: UUID): ApiRequest[Customer] =
    ApiRequest[Customer](ApiMethods.GET, "https://virtserver.swaggerhub.com/XQDEV/smartcare/1.0.0", "/admin/customers/{customer_id}", "application/json")
      .withPathParam("customer_id", customerId)
      .withErrorResponse[Unit](404)
      .withSuccessResponse[Customer](200)
        /**
   * Gets a single site of a customer
   * 
   * Expected answers:
   *   code 200 :  (response)
   * 
   * @param siteId 
   * @param customerId 
   */
  def adminGetCustomerSite(siteId: UUID, customerId: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, "https://virtserver.swaggerhub.com/XQDEV/smartcare/1.0.0", "/admin/customers/{customer_id}/sites/{site_id}", "application/json")
      .withPathParam("site_id", siteId)
      .withPathParam("customer_id", customerId)
      .withSuccessResponse[Unit](200)
        /**
   * Gets the sites of a single customer
   * 
   * Expected answers:
   *   code 200 :  (response)
   * 
   * @param customerId 
   */
  def adminGetCustomerSites(customerId: UUID): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, "https://virtserver.swaggerhub.com/XQDEV/smartcare/1.0.0", "/admin/customers/{customer_id}/sites", "application/json")
      .withPathParam("customer_id", customerId)
      .withSuccessResponse[Unit](200)
        /**
   * Get all customers
   * 
   * Expected answers:
   *   code 200 : Customers (response)
   * 
   * @param skip Amount of customers to skip
   * @param limit Maximum amount of customers to get
   */
  def adminGetCustomers(skip: Option[Int] = None, limit: Option[Int] = None): ApiRequest[Customers] =
    ApiRequest[Customers](ApiMethods.GET, "https://virtserver.swaggerhub.com/XQDEV/smartcare/1.0.0", "/admin/customers", "application/json")
      .withQueryParam("skip", skip)
      .withQueryParam("limit", limit)
      .withSuccessResponse[Customers](200)
        /**
   * Get a single device
   * 
   * Expected answers:
   *   code 404 :  (Device not found)
   *   code 200 : Device (response)
   * 
   * @param deviceId 
   */
  def adminGetDevice(deviceId: UUID): ApiRequest[Device] =
    ApiRequest[Device](ApiMethods.GET, "https://virtserver.swaggerhub.com/XQDEV/smartcare/1.0.0", "/admin/devices/{device_id}", "application/json")
      .withPathParam("device_id", deviceId)
      .withErrorResponse[Unit](404)
      .withSuccessResponse[Device](200)
        /**
   * Get all devices
   * 
   * Expected answers:
   *   code 200 : Devices (response)
   * 
   * @param skip Amount of customers to skip
   * @param limit Maximum amount of customers to get
   */
  def adminGetDevices(skip: Option[Int] = None, limit: Option[Int] = None): ApiRequest[Devices] =
    ApiRequest[Devices](ApiMethods.GET, "https://virtserver.swaggerhub.com/XQDEV/smartcare/1.0.0", "/admin/devices", "application/json")
      .withQueryParam("skip", skip)
      .withQueryParam("limit", limit)
      .withSuccessResponse[Devices](200)
        /**
   * Get a single role
   * 
   * Expected answers:
   *   code 404 :  (Role not found)
   *   code 200 : Role (response)
   * 
   * @param roleId 
   */
  def adminGetRole(roleId: UUID): ApiRequest[Role] =
    ApiRequest[Role](ApiMethods.GET, "https://virtserver.swaggerhub.com/XQDEV/smartcare/1.0.0", "/admin/roles/{role_id}", "application/json")
      .withPathParam("role_id", roleId)
      .withErrorResponse[Unit](404)
      .withSuccessResponse[Role](200)
        /**
   * Get permissions of a role
   * 
   * Expected answers:
   *   code 404 :  (Role not found)
   *   code 200 :  (response)
   * 
   * @param roleId 
   */
  def adminGetRolePermissions(roleId: UUID): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, "https://virtserver.swaggerhub.com/XQDEV/smartcare/1.0.0", "/admin/roles/{role_id}/permissions", "application/json")
      .withPathParam("role_id", roleId)
      .withErrorResponse[Unit](404)
      .withSuccessResponse[Unit](200)
        /**
   * Get the users with this role
   * 
   * Expected answers:
   *   code 404 :  (Role not found)
   *   code 200 :  (response)
   * 
   * @param roleId 
   */
  def adminGetRoleUsers(roleId: UUID): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, "https://virtserver.swaggerhub.com/XQDEV/smartcare/1.0.0", "/admin/roles/{role_id}/users", "application/json")
      .withPathParam("role_id", roleId)
      .withErrorResponse[Unit](404)
      .withSuccessResponse[Unit](200)
        /**
   * Get all Roles
   * 
   * Expected answers:
   *   code 200 : Roles (response)
   * 
   * @param skip Amount of users to skip
   * @param limit Maximum amount of users to get
   */
  def adminGetRoles(skip: Option[Int] = None, limit: Option[Int] = None): ApiRequest[Roles] =
    ApiRequest[Roles](ApiMethods.GET, "https://virtserver.swaggerhub.com/XQDEV/smartcare/1.0.0", "/admin/roles", "application/json")
      .withQueryParam("skip", skip)
      .withQueryParam("limit", limit)
      .withSuccessResponse[Roles](200)
        /**
   * Get a single user
   * 
   * Expected answers:
   *   code 404 :  (User not found)
   *   code 200 : User (response)
   * 
   * @param userId 
   */
  def adminGetUser(userId: UUID): ApiRequest[User] =
    ApiRequest[User](ApiMethods.GET, "https://virtserver.swaggerhub.com/XQDEV/smartcare/1.0.0", "/admin/users/{user_id}", "application/json")
      .withPathParam("user_id", userId)
      .withErrorResponse[Unit](404)
      .withSuccessResponse[User](200)
        /**
   * Get all Users
   * 
   * Expected answers:
   *   code 200 : Users (response)
   * 
   * @param skip Amount of users to skip
   * @param limit Maximum amount of users to get
   */
  def adminGetUsers(skip: Option[Int] = None, limit: Option[Int] = None): ApiRequest[Users] =
    ApiRequest[Users](ApiMethods.GET, "https://virtserver.swaggerhub.com/XQDEV/smartcare/1.0.0", "/admin/users", "application/json")
      .withQueryParam("skip", skip)
      .withQueryParam("limit", limit)
      .withSuccessResponse[Users](200)
        /**
   * Update a customer
   * 
   * Expected answers:
   *   code 404 :  (Customer not found)
   *   code 200 : ApiResponse (response)
   * 
   * @param customerId 
   * @param customer 
   */
  def adminUpdateCustomer(customerId: UUID, customer: Customer): ApiRequest[ApiResponse] =
    ApiRequest[ApiResponse](ApiMethods.PUT, "https://virtserver.swaggerhub.com/XQDEV/smartcare/1.0.0", "/admin/customers/{customer_id}", "application/json")
      .withBody(customer)
      .withPathParam("customer_id", customerId)
      .withErrorResponse[Unit](404)
      .withSuccessResponse[ApiResponse](200)
        /**
   * Update a customer
   * 
   * Expected answers:
   *   code 404 :  (Customer not found)
   *   code 200 : ApiResponse (response)
   * 
   * @param customerId 
   * @param customer 
   */
  def adminUpdateCustomerAttributes(customerId: UUID, customer: Customer): ApiRequest[ApiResponse] =
    ApiRequest[ApiResponse](ApiMethods.PATCH, "https://virtserver.swaggerhub.com/XQDEV/smartcare/1.0.0", "/admin/customers/{customer_id}", "application/json")
      .withBody(customer)
      .withPathParam("customer_id", customerId)
      .withErrorResponse[Unit](404)
      .withSuccessResponse[ApiResponse](200)
        /**
   * Update atributes of a device
   * 
   * Expected answers:
   *   code 404 :  (Device not found)
   *   code 200 : ApiResponse (response)
   * 
   * @param deviceId 
   * @param role 
   */
  def adminUpdateDeviceAttributes&quot;(deviceId: UUID, role: Device): ApiRequest[ApiResponse] =
    ApiRequest[ApiResponse](ApiMethods.PATCH, "https://virtserver.swaggerhub.com/XQDEV/smartcare/1.0.0", "/admin/devices/{device_id}", "application/json")
      .withBody(role)
      .withPathParam("device_id", deviceId)
      .withErrorResponse[Unit](404)
      .withSuccessResponse[ApiResponse](200)
        /**
   * Update atributes of a role
   * 
   * Expected answers:
   *   code 404 :  (Role not found)
   *   code 200 : ApiResponse (response)
   * 
   * @param roleId 
   * @param role 
   */
  def adminUpdateRoleAttributes&quot;(roleId: UUID, role: Role): ApiRequest[ApiResponse] =
    ApiRequest[ApiResponse](ApiMethods.PATCH, "https://virtserver.swaggerhub.com/XQDEV/smartcare/1.0.0", "/admin/roles/{role_id}", "application/json")
      .withBody(role)
      .withPathParam("role_id", roleId)
      .withErrorResponse[Unit](404)
      .withSuccessResponse[ApiResponse](200)
        /**
   * Update atributes of a user
   * 
   * Expected answers:
   *   code 404 :  (User not found)
   *   code 200 : ApiResponse (response)
   * 
   * @param userId 
   * @param role 
   */
  def adminUpdateUserAttributes&quot;(userId: UUID, role: User): ApiRequest[ApiResponse] =
    ApiRequest[ApiResponse](ApiMethods.PATCH, "https://virtserver.swaggerhub.com/XQDEV/smartcare/1.0.0", "/admin/users/{user_id}", "application/json")
      .withBody(role)
      .withPathParam("user_id", userId)
      .withErrorResponse[Unit](404)
      .withSuccessResponse[ApiResponse](200)
        /**
   * Create a new customer
   * 
   * Expected answers:
   *   code 200 : ApiResponse (response)
   * 
   * @param adminCreateCustomer 
   */
  def createCustomer(adminCreateCustomer: Customer): ApiRequest[ApiResponse] =
    ApiRequest[ApiResponse](ApiMethods.POST, "https://virtserver.swaggerhub.com/XQDEV/smartcare/1.0.0", "/admin/customers", "application/json")
      .withBody(adminCreateCustomer)
      .withSuccessResponse[ApiResponse](200)
        /**
   * Create a new role
   * 
   * Expected answers:
   *   code 200 : ApiResponse (response)
   * 
   * @param adminCreateRole 
   */
  def createRole(adminCreateRole: Role): ApiRequest[ApiResponse] =
    ApiRequest[ApiResponse](ApiMethods.POST, "https://virtserver.swaggerhub.com/XQDEV/smartcare/1.0.0", "/admin/roles", "application/json")
      .withBody(adminCreateRole)
      .withSuccessResponse[ApiResponse](200)
        /**
   * Create a new user
   * 
   * Expected answers:
   *   code 200 : ApiResponse (response)
   * 
   * @param adminCreateUser 
   */
  def createUser(adminCreateUser: User): ApiRequest[ApiResponse] =
    ApiRequest[ApiResponse](ApiMethods.POST, "https://virtserver.swaggerhub.com/XQDEV/smartcare/1.0.0", "/admin/users", "application/json")
      .withBody(adminCreateUser)
      .withSuccessResponse[ApiResponse](200)
        /**
   * Update a device
   * 
   * Expected answers:
   *   code 404 :  (Device not found)
   *   code 200 : ApiResponse (response)
   * 
   * @param deviceId 
   * @param role 
   */
  def updateDevice(deviceId: UUID, role: Device): ApiRequest[ApiResponse] =
    ApiRequest[ApiResponse](ApiMethods.PUT, "https://virtserver.swaggerhub.com/XQDEV/smartcare/1.0.0", "/admin/devices/{device_id}", "application/json")
      .withBody(role)
      .withPathParam("device_id", deviceId)
      .withErrorResponse[Unit](404)
      .withSuccessResponse[ApiResponse](200)
        /**
   * Update a role
   * 
   * Expected answers:
   *   code 404 :  (Customer not found)
   *   code 200 : ApiResponse (response)
   * 
   * @param roleId 
   * @param role 
   */
  def updateRole(roleId: UUID, role: Role): ApiRequest[ApiResponse] =
    ApiRequest[ApiResponse](ApiMethods.PUT, "https://virtserver.swaggerhub.com/XQDEV/smartcare/1.0.0", "/admin/roles/{role_id}", "application/json")
      .withBody(role)
      .withPathParam("role_id", roleId)
      .withErrorResponse[Unit](404)
      .withSuccessResponse[ApiResponse](200)
        /**
   * Update a user
   * 
   * Expected answers:
   *   code 404 :  (User not found)
   *   code 200 : ApiResponse (response)
   * 
   * @param userId 
   * @param role 
   */
  def updateUser(userId: UUID, role: User): ApiRequest[ApiResponse] =
    ApiRequest[ApiResponse](ApiMethods.PUT, "https://virtserver.swaggerhub.com/XQDEV/smartcare/1.0.0", "/admin/users/{user_id}", "application/json")
      .withBody(role)
      .withPathParam("user_id", userId)
      .withErrorResponse[Unit](404)
      .withSuccessResponse[ApiResponse](200)
      

}

