/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.SiteApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * The API for the AAL IOT project
 * Version: 1.0.0
 * Generated by: class io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.SiteApi');

goog.require('API.Client.ApiResponse');
goog.require('API.Client.Device');
goog.require('API.Client.Invite');
goog.require('API.Client.Room');
goog.require('API.Client.Site');
goog.require('API.Client.Sites');
goog.require('API.Client.UUID');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.SiteApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('SiteApiBasePath') ?
                   /** @type {!string} */ ($injector.get('SiteApiBasePath')) :
                   'https://virtserver.swaggerhub.com/XQDEV/smartcare/1.0.0';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('SiteApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('SiteApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.SiteApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * 
 * Send an invite to get access to this site
 * @param {!string} siteId 
 * @param {!Invite} invite 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ApiResponse>}
 */
API.Client.SiteApi.prototype.createInvite = function(siteId, invite, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/sites/{site_id}/invites'
      .replace('{' + 'site_id' + '}', String(siteId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'siteId' is set
  if (!siteId) {
    throw new Error('Missing required parameter siteId when calling createInvite');
  }
  // verify required parameter 'invite' is set
  if (!invite) {
    throw new Error('Missing required parameter invite when calling createInvite');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: invite,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Add a device to a room
 * @param {!API.Client.UUID} siteId 
 * @param {!API.Client.UUID} roomId 
 * @param {!Device} device 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ApiResponse>}
 */
API.Client.SiteApi.prototype.createRoomDevice = function(siteId, roomId, device, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/sites/{site_id}/rooms/{room_id}/devices'
      .replace('{' + 'site_id' + '}', String(siteId))
      .replace('{' + 'room_id' + '}', String(roomId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'siteId' is set
  if (!siteId) {
    throw new Error('Missing required parameter siteId when calling createRoomDevice');
  }
  // verify required parameter 'roomId' is set
  if (!roomId) {
    throw new Error('Missing required parameter roomId when calling createRoomDevice');
  }
  // verify required parameter 'device' is set
  if (!device) {
    throw new Error('Missing required parameter device when calling createRoomDevice');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: device,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Create a new site
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Site>}
 */
API.Client.SiteApi.prototype.createSite = function(opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/sites';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Create room for a site
 * @param {!API.Client.UUID} siteId 
 * @param {!Room} room 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ApiResponse>}
 */
API.Client.SiteApi.prototype.createSiteRoom = function(siteId, room, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/sites/{site_id}/rooms'
      .replace('{' + 'site_id' + '}', String(siteId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'siteId' is set
  if (!siteId) {
    throw new Error('Missing required parameter siteId when calling createSiteRoom');
  }
  // verify required parameter 'room' is set
  if (!room) {
    throw new Error('Missing required parameter room when calling createSiteRoom');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: room,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Delete a single invite of a site
 * @param {!string} inviteId 
 * @param {!string} siteId 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ApiResponse>}
 */
API.Client.SiteApi.prototype.deleteInvite = function(inviteId, siteId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/sites/{site_id}/invites/{invite_id}'
      .replace('{' + 'invite_id' + '}', String(inviteId))
      .replace('{' + 'site_id' + '}', String(siteId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'inviteId' is set
  if (!inviteId) {
    throw new Error('Missing required parameter inviteId when calling deleteInvite');
  }
  // verify required parameter 'siteId' is set
  if (!siteId) {
    throw new Error('Missing required parameter siteId when calling deleteInvite');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Delete the device from the room
 * @param {!API.Client.UUID} siteId 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ApiResponse>}
 */
API.Client.SiteApi.prototype.deleteRoomDevice = function(siteId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/sites/{site_id}/rooms/{room_id}/devices/{device_id}'
      .replace('{' + 'site_id' + '}', String(siteId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'siteId' is set
  if (!siteId) {
    throw new Error('Missing required parameter siteId when calling deleteRoomDevice');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!API.Client.UUID} siteId 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ApiResponse>}
 */
API.Client.SiteApi.prototype.deleteSite = function(siteId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/sites/{site_id}'
      .replace('{' + 'site_id' + '}', String(siteId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'siteId' is set
  if (!siteId) {
    throw new Error('Missing required parameter siteId when calling deleteSite');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Delete the room
 * @param {!API.Client.UUID} siteId 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ApiResponse>}
 */
API.Client.SiteApi.prototype.deleteSiteRoom = function(siteId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/sites/{site_id}/rooms/{room_id}'
      .replace('{' + 'site_id' + '}', String(siteId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'siteId' is set
  if (!siteId) {
    throw new Error('Missing required parameter siteId when calling deleteSiteRoom');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get a single invite of a site
 * @param {!string} inviteId 
 * @param {!string} siteId 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Invite>}
 */
API.Client.SiteApi.prototype.getInvite = function(inviteId, siteId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/sites/{site_id}/invites/{invite_id}'
      .replace('{' + 'invite_id' + '}', String(inviteId))
      .replace('{' + 'site_id' + '}', String(siteId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'inviteId' is set
  if (!inviteId) {
    throw new Error('Missing required parameter inviteId when calling getInvite');
  }
  // verify required parameter 'siteId' is set
  if (!siteId) {
    throw new Error('Missing required parameter siteId when calling getInvite');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get invites for a single site
 * @param {!string} siteId 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.SiteApi.prototype.getInvites = function(siteId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/sites/{site_id}/invites'
      .replace('{' + 'site_id' + '}', String(siteId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'siteId' is set
  if (!siteId) {
    throw new Error('Missing required parameter siteId when calling getInvites');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get a device of a room
 * @param {!API.Client.UUID} siteId 
 * @param {!API.Client.UUID} roomId 
 * @param {!API.Client.UUID} deviceId 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.SiteApi.prototype.getRoomDevice = function(siteId, roomId, deviceId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/sites/{site_id}/rooms/{room_id}/devices/{device_id}'
      .replace('{' + 'site_id' + '}', String(siteId))
      .replace('{' + 'room_id' + '}', String(roomId))
      .replace('{' + 'device_id' + '}', String(deviceId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'siteId' is set
  if (!siteId) {
    throw new Error('Missing required parameter siteId when calling getRoomDevice');
  }
  // verify required parameter 'roomId' is set
  if (!roomId) {
    throw new Error('Missing required parameter roomId when calling getRoomDevice');
  }
  // verify required parameter 'deviceId' is set
  if (!deviceId) {
    throw new Error('Missing required parameter deviceId when calling getRoomDevice');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get the devices of a room
 * @param {!API.Client.UUID} siteId 
 * @param {!API.Client.UUID} roomId 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.SiteApi.prototype.getRoomDevices = function(siteId, roomId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/sites/{site_id}/rooms/{room_id}/devices'
      .replace('{' + 'site_id' + '}', String(siteId))
      .replace('{' + 'room_id' + '}', String(roomId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'siteId' is set
  if (!siteId) {
    throw new Error('Missing required parameter siteId when calling getRoomDevices');
  }
  // verify required parameter 'roomId' is set
  if (!roomId) {
    throw new Error('Missing required parameter roomId when calling getRoomDevices');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Gets a single site by its site id
 * @param {!API.Client.UUID} siteId 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Site>}
 */
API.Client.SiteApi.prototype.getSite = function(siteId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/sites/{site_id}'
      .replace('{' + 'site_id' + '}', String(siteId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'siteId' is set
  if (!siteId) {
    throw new Error('Missing required parameter siteId when calling getSite');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get a room of a site
 * @param {!API.Client.UUID} siteId 
 * @param {!API.Client.UUID} roomId 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.SiteApi.prototype.getSiteRoom = function(siteId, roomId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/sites/{site_id}/rooms/{room_id}'
      .replace('{' + 'site_id' + '}', String(siteId))
      .replace('{' + 'room_id' + '}', String(roomId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'siteId' is set
  if (!siteId) {
    throw new Error('Missing required parameter siteId when calling getSiteRoom');
  }
  // verify required parameter 'roomId' is set
  if (!roomId) {
    throw new Error('Missing required parameter roomId when calling getSiteRoom');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get the rooms of a site
 * @param {!API.Client.UUID} siteId 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.SiteApi.prototype.getSiteRooms = function(siteId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/sites/{site_id}/rooms'
      .replace('{' + 'site_id' + '}', String(siteId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'siteId' is set
  if (!siteId) {
    throw new Error('Missing required parameter siteId when calling getSiteRooms');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get all sites for the logged in user
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Sites>}
 */
API.Client.SiteApi.prototype.getSites = function(opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/sites';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!API.Client.UUID} siteId 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ApiResponse>}
 */
API.Client.SiteApi.prototype.updateSite = function(siteId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/sites/{site_id}'
      .replace('{' + 'site_id' + '}', String(siteId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'siteId' is set
  if (!siteId) {
    throw new Error('Missing required parameter siteId when calling updateSite');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!API.Client.UUID} siteId 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ApiResponse>}
 */
API.Client.SiteApi.prototype.updateSiteAttributes = function(siteId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/sites/{site_id}'
      .replace('{' + 'site_id' + '}', String(siteId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'siteId' is set
  if (!siteId) {
    throw new Error('Missing required parameter siteId when calling updateSiteAttributes');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PATCH',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Create room for a site
 * @param {!API.Client.UUID} siteId 
 * @param {!Room} room 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ApiResponse>}
 */
API.Client.SiteApi.prototype.updateSiteRoom = function(siteId, room, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/sites/{site_id}/rooms/{room_id}'
      .replace('{' + 'site_id' + '}', String(siteId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'siteId' is set
  if (!siteId) {
    throw new Error('Missing required parameter siteId when calling updateSiteRoom');
  }
  // verify required parameter 'room' is set
  if (!room) {
    throw new Error('Missing required parameter room when calling updateSiteRoom');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: room,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Update the rooms attributes
 * @param {!API.Client.UUID} siteId 
 * @param {!Room} room 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ApiResponse>}
 */
API.Client.SiteApi.prototype.updateSiteRoomAttributes = function(siteId, room, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/sites/{site_id}/rooms/{room_id}'
      .replace('{' + 'site_id' + '}', String(siteId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'siteId' is set
  if (!siteId) {
    throw new Error('Missing required parameter siteId when calling updateSiteRoomAttributes');
  }
  // verify required parameter 'room' is set
  if (!room) {
    throw new Error('Missing required parameter room when calling updateSiteRoomAttributes');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PATCH',
    url: path,
    json: true,
    data: room,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
