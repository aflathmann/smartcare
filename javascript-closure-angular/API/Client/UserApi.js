/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.UserApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * The API for the AAL IOT project
 * Version: 1.0.0
 * Generated by: class io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.UserApi');

goog.require('API.Client.ActivationInfo');
goog.require('API.Client.ConfirmPasswordRequestInfo');
goog.require('API.Client.PasswordRequestInfo');
goog.require('API.Client.Registration');
goog.require('API.Client.UUID');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.UserApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('UserApiBasePath') ?
                   /** @type {!string} */ ($injector.get('UserApiBasePath')) :
                   'https://virtserver.swaggerhub.com/XQDEV/smartcare/1.0.0';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('UserApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('UserApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.UserApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * 
 * Activate an inactive user
 * @param {!API.Client.UUID} userId 
 * @param {!ActivationInfo} activation 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.UserApi.prototype.activateUser = function(userId, activation, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/users/{user_id}/activate'
      .replace('{' + 'user_id' + '}', String(userId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'userId' is set
  if (!userId) {
    throw new Error('Missing required parameter userId when calling activateUser');
  }
  // verify required parameter 'activation' is set
  if (!activation) {
    throw new Error('Missing required parameter activation when calling activateUser');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: activation,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Request a new password
 * @param {!API.Client.UUID} userId 
 * @param {!ConfirmPasswordRequestInfo} register 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.UserApi.prototype.confirmNewPasswordRequest = function(userId, register, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/users/{user_id}/confirmNewPasswordRequest'
      .replace('{' + 'user_id' + '}', String(userId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'userId' is set
  if (!userId) {
    throw new Error('Missing required parameter userId when calling confirmNewPasswordRequest');
  }
  // verify required parameter 'register' is set
  if (!register) {
    throw new Error('Missing required parameter register when calling confirmNewPasswordRequest');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: register,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Register a new user
 * @param {!Registration} register 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.UserApi.prototype.registerUser = function(register, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/users/register';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'register' is set
  if (!register) {
    throw new Error('Missing required parameter register when calling registerUser');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: register,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Request a new password
 * @param {!API.Client.UUID} userId 
 * @param {!PasswordRequestInfo} register 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.UserApi.prototype.requestNewPassword = function(userId, register, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/users/{user_id}/requestNewPassword'
      .replace('{' + 'user_id' + '}', String(userId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'userId' is set
  if (!userId) {
    throw new Error('Missing required parameter userId when calling requestNewPassword');
  }
  // verify required parameter 'register' is set
  if (!register) {
    throw new Error('Missing required parameter register when calling requestNewPassword');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: register,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
