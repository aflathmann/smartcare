/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.AdminApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * The API for the AAL IOT project
 * Version: 1.0.0
 * Generated by: class io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.AdminApi');

goog.require('API.Client.ApiResponse');
goog.require('API.Client.Customer');
goog.require('API.Client.Customers');
goog.require('API.Client.Device');
goog.require('API.Client.Devices');
goog.require('API.Client.Role');
goog.require('API.Client.Roles');
goog.require('API.Client.UUID');
goog.require('API.Client.User');
goog.require('API.Client.Users');
goog.require('API.Client.permissions');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.AdminApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('AdminApiBasePath') ?
                   /** @type {!string} */ ($injector.get('AdminApiBasePath')) :
                   'https://virtserver.swaggerhub.com/XQDEV/smartcare/1.0.0';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('AdminApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('AdminApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.AdminApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * 
 * Add users to this role
 * @param {!API.Client.UUID} roleId 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.AdminApi.prototype.adminAddRoleUsers = function(roleId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/admin/roles/{role_id}/users'
      .replace('{' + 'role_id' + '}', String(roleId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'roleId' is set
  if (!roleId) {
    throw new Error('Missing required parameter roleId when calling adminAddRoleUsers');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Register a new device
 * @param {!number=} opt_skip Amount of customers to skip
 * @param {!number=} opt_limit Maximum amount of customers to get
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Devices>}
 */
API.Client.AdminApi.prototype.adminCreateDevice = function(opt_skip, opt_limit, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/admin/devices';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_skip !== undefined) {
    queryParameters['skip'] = opt_skip;
  }

  if (opt_limit !== undefined) {
    queryParameters['limit'] = opt_limit;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Create or update permissions of a role
 * @param {!API.Client.UUID} roleId 
 * @param {!Array<!API.Client.permissions>} permissions 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.AdminApi.prototype.adminCreateOrUpdateRolePermissions = function(roleId, permissions, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/admin/roles/{role_id}/permissions'
      .replace('{' + 'role_id' + '}', String(roleId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'roleId' is set
  if (!roleId) {
    throw new Error('Missing required parameter roleId when calling adminCreateOrUpdateRolePermissions');
  }
  // verify required parameter 'permissions' is set
  if (!permissions) {
    throw new Error('Missing required parameter permissions when calling adminCreateOrUpdateRolePermissions');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: permissions,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Delete a customer
 * @param {!API.Client.UUID} customerId 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ApiResponse>}
 */
API.Client.AdminApi.prototype.adminDeleteCustomer = function(customerId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/admin/customers/{customer_id}'
      .replace('{' + 'customer_id' + '}', String(customerId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'customerId' is set
  if (!customerId) {
    throw new Error('Missing required parameter customerId when calling adminDeleteCustomer');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Delete a device
 * @param {!API.Client.UUID} deviceId 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ApiResponse>}
 */
API.Client.AdminApi.prototype.adminDeleteDevice = function(deviceId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/admin/devices/{device_id}'
      .replace('{' + 'device_id' + '}', String(deviceId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'deviceId' is set
  if (!deviceId) {
    throw new Error('Missing required parameter deviceId when calling adminDeleteDevice');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Delete a role
 * @param {!API.Client.UUID} roleId 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ApiResponse>}
 */
API.Client.AdminApi.prototype.adminDeleteRole = function(roleId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/admin/roles/{role_id}'
      .replace('{' + 'role_id' + '}', String(roleId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'roleId' is set
  if (!roleId) {
    throw new Error('Missing required parameter roleId when calling adminDeleteRole');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Delete a user
 * @param {!API.Client.UUID} userId 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ApiResponse>}
 */
API.Client.AdminApi.prototype.adminDeleteUser = function(userId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/admin/users/{user_id}'
      .replace('{' + 'user_id' + '}', String(userId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'userId' is set
  if (!userId) {
    throw new Error('Missing required parameter userId when calling adminDeleteUser');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Gets a single customer by its customer id
 * @param {!API.Client.UUID} customerId 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Customer>}
 */
API.Client.AdminApi.prototype.adminGetCustomer = function(customerId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/admin/customers/{customer_id}'
      .replace('{' + 'customer_id' + '}', String(customerId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'customerId' is set
  if (!customerId) {
    throw new Error('Missing required parameter customerId when calling adminGetCustomer');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Gets a single site of a customer
 * @param {!API.Client.UUID} siteId 
 * @param {!string} customerId 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.AdminApi.prototype.adminGetCustomerSite = function(siteId, customerId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/admin/customers/{customer_id}/sites/{site_id}'
      .replace('{' + 'site_id' + '}', String(siteId))
      .replace('{' + 'customer_id' + '}', String(customerId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'siteId' is set
  if (!siteId) {
    throw new Error('Missing required parameter siteId when calling adminGetCustomerSite');
  }
  // verify required parameter 'customerId' is set
  if (!customerId) {
    throw new Error('Missing required parameter customerId when calling adminGetCustomerSite');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Gets the sites of a single customer
 * @param {!API.Client.UUID} customerId 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.AdminApi.prototype.adminGetCustomerSites = function(customerId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/admin/customers/{customer_id}/sites'
      .replace('{' + 'customer_id' + '}', String(customerId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'customerId' is set
  if (!customerId) {
    throw new Error('Missing required parameter customerId when calling adminGetCustomerSites');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get all customers
 * @param {!number=} opt_skip Amount of customers to skip
 * @param {!number=} opt_limit Maximum amount of customers to get
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Customers>}
 */
API.Client.AdminApi.prototype.adminGetCustomers = function(opt_skip, opt_limit, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/admin/customers';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_skip !== undefined) {
    queryParameters['skip'] = opt_skip;
  }

  if (opt_limit !== undefined) {
    queryParameters['limit'] = opt_limit;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get a single device
 * @param {!API.Client.UUID} deviceId 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Device>}
 */
API.Client.AdminApi.prototype.adminGetDevice = function(deviceId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/admin/devices/{device_id}'
      .replace('{' + 'device_id' + '}', String(deviceId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'deviceId' is set
  if (!deviceId) {
    throw new Error('Missing required parameter deviceId when calling adminGetDevice');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get all devices
 * @param {!number=} opt_skip Amount of customers to skip
 * @param {!number=} opt_limit Maximum amount of customers to get
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Devices>}
 */
API.Client.AdminApi.prototype.adminGetDevices = function(opt_skip, opt_limit, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/admin/devices';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_skip !== undefined) {
    queryParameters['skip'] = opt_skip;
  }

  if (opt_limit !== undefined) {
    queryParameters['limit'] = opt_limit;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get a single role
 * @param {!API.Client.UUID} roleId 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Role>}
 */
API.Client.AdminApi.prototype.adminGetRole = function(roleId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/admin/roles/{role_id}'
      .replace('{' + 'role_id' + '}', String(roleId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'roleId' is set
  if (!roleId) {
    throw new Error('Missing required parameter roleId when calling adminGetRole');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get permissions of a role
 * @param {!API.Client.UUID} roleId 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.AdminApi.prototype.adminGetRolePermissions = function(roleId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/admin/roles/{role_id}/permissions'
      .replace('{' + 'role_id' + '}', String(roleId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'roleId' is set
  if (!roleId) {
    throw new Error('Missing required parameter roleId when calling adminGetRolePermissions');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get the users with this role
 * @param {!API.Client.UUID} roleId 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.AdminApi.prototype.adminGetRoleUsers = function(roleId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/admin/roles/{role_id}/users'
      .replace('{' + 'role_id' + '}', String(roleId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'roleId' is set
  if (!roleId) {
    throw new Error('Missing required parameter roleId when calling adminGetRoleUsers');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get all Roles
 * @param {!number=} opt_skip Amount of users to skip
 * @param {!number=} opt_limit Maximum amount of users to get
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Roles>}
 */
API.Client.AdminApi.prototype.adminGetRoles = function(opt_skip, opt_limit, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/admin/roles';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_skip !== undefined) {
    queryParameters['skip'] = opt_skip;
  }

  if (opt_limit !== undefined) {
    queryParameters['limit'] = opt_limit;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get a single user
 * @param {!API.Client.UUID} userId 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.User>}
 */
API.Client.AdminApi.prototype.adminGetUser = function(userId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/admin/users/{user_id}'
      .replace('{' + 'user_id' + '}', String(userId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'userId' is set
  if (!userId) {
    throw new Error('Missing required parameter userId when calling adminGetUser');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get all Users
 * @param {!number=} opt_skip Amount of users to skip
 * @param {!number=} opt_limit Maximum amount of users to get
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Users>}
 */
API.Client.AdminApi.prototype.adminGetUsers = function(opt_skip, opt_limit, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/admin/users';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_skip !== undefined) {
    queryParameters['skip'] = opt_skip;
  }

  if (opt_limit !== undefined) {
    queryParameters['limit'] = opt_limit;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Update a customer
 * @param {!API.Client.UUID} customerId 
 * @param {!Customer} customer 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ApiResponse>}
 */
API.Client.AdminApi.prototype.adminUpdateCustomer = function(customerId, customer, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/admin/customers/{customer_id}'
      .replace('{' + 'customer_id' + '}', String(customerId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'customerId' is set
  if (!customerId) {
    throw new Error('Missing required parameter customerId when calling adminUpdateCustomer');
  }
  // verify required parameter 'customer' is set
  if (!customer) {
    throw new Error('Missing required parameter customer when calling adminUpdateCustomer');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: customer,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Update a customer
 * @param {!API.Client.UUID} customerId 
 * @param {!Customer} customer 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ApiResponse>}
 */
API.Client.AdminApi.prototype.adminUpdateCustomerAttributes = function(customerId, customer, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/admin/customers/{customer_id}'
      .replace('{' + 'customer_id' + '}', String(customerId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'customerId' is set
  if (!customerId) {
    throw new Error('Missing required parameter customerId when calling adminUpdateCustomerAttributes');
  }
  // verify required parameter 'customer' is set
  if (!customer) {
    throw new Error('Missing required parameter customer when calling adminUpdateCustomerAttributes');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PATCH',
    url: path,
    json: true,
    data: customer,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Update atributes of a device
 * @param {!API.Client.UUID} deviceId 
 * @param {!Device} role 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ApiResponse>}
 */
API.Client.AdminApi.prototype.adminUpdateDeviceAttributes = function(deviceId, role, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/admin/devices/{device_id}'
      .replace('{' + 'device_id' + '}', String(deviceId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'deviceId' is set
  if (!deviceId) {
    throw new Error('Missing required parameter deviceId when calling adminUpdateDeviceAttributes');
  }
  // verify required parameter 'role' is set
  if (!role) {
    throw new Error('Missing required parameter role when calling adminUpdateDeviceAttributes');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PATCH',
    url: path,
    json: true,
    data: role,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Update atributes of a role
 * @param {!API.Client.UUID} roleId 
 * @param {!Role} role 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ApiResponse>}
 */
API.Client.AdminApi.prototype.adminUpdateRoleAttributes = function(roleId, role, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/admin/roles/{role_id}'
      .replace('{' + 'role_id' + '}', String(roleId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'roleId' is set
  if (!roleId) {
    throw new Error('Missing required parameter roleId when calling adminUpdateRoleAttributes');
  }
  // verify required parameter 'role' is set
  if (!role) {
    throw new Error('Missing required parameter role when calling adminUpdateRoleAttributes');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PATCH',
    url: path,
    json: true,
    data: role,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Update atributes of a user
 * @param {!API.Client.UUID} userId 
 * @param {!User} role 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ApiResponse>}
 */
API.Client.AdminApi.prototype.adminUpdateUserAttributes = function(userId, role, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/admin/users/{user_id}'
      .replace('{' + 'user_id' + '}', String(userId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'userId' is set
  if (!userId) {
    throw new Error('Missing required parameter userId when calling adminUpdateUserAttributes');
  }
  // verify required parameter 'role' is set
  if (!role) {
    throw new Error('Missing required parameter role when calling adminUpdateUserAttributes');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PATCH',
    url: path,
    json: true,
    data: role,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Create a new customer
 * @param {!Customer} adminCreateCustomer 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ApiResponse>}
 */
API.Client.AdminApi.prototype.createCustomer = function(adminCreateCustomer, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/admin/customers';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'adminCreateCustomer' is set
  if (!adminCreateCustomer) {
    throw new Error('Missing required parameter adminCreateCustomer when calling createCustomer');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: adminCreateCustomer,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Create a new role
 * @param {!Role} adminCreateRole 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ApiResponse>}
 */
API.Client.AdminApi.prototype.createRole = function(adminCreateRole, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/admin/roles';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'adminCreateRole' is set
  if (!adminCreateRole) {
    throw new Error('Missing required parameter adminCreateRole when calling createRole');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: adminCreateRole,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Create a new user
 * @param {!User} adminCreateUser 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ApiResponse>}
 */
API.Client.AdminApi.prototype.createUser = function(adminCreateUser, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/admin/users';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'adminCreateUser' is set
  if (!adminCreateUser) {
    throw new Error('Missing required parameter adminCreateUser when calling createUser');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: adminCreateUser,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Update a device
 * @param {!API.Client.UUID} deviceId 
 * @param {!Device} role 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ApiResponse>}
 */
API.Client.AdminApi.prototype.updateDevice = function(deviceId, role, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/admin/devices/{device_id}'
      .replace('{' + 'device_id' + '}', String(deviceId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'deviceId' is set
  if (!deviceId) {
    throw new Error('Missing required parameter deviceId when calling updateDevice');
  }
  // verify required parameter 'role' is set
  if (!role) {
    throw new Error('Missing required parameter role when calling updateDevice');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: role,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Update a role
 * @param {!API.Client.UUID} roleId 
 * @param {!Role} role 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ApiResponse>}
 */
API.Client.AdminApi.prototype.updateRole = function(roleId, role, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/admin/roles/{role_id}'
      .replace('{' + 'role_id' + '}', String(roleId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'roleId' is set
  if (!roleId) {
    throw new Error('Missing required parameter roleId when calling updateRole');
  }
  // verify required parameter 'role' is set
  if (!role) {
    throw new Error('Missing required parameter role when calling updateRole');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: role,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Update a user
 * @param {!API.Client.UUID} userId 
 * @param {!User} role 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ApiResponse>}
 */
API.Client.AdminApi.prototype.updateUser = function(userId, role, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/admin/users/{user_id}'
      .replace('{' + 'user_id' + '}', String(userId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'userId' is set
  if (!userId) {
    throw new Error('Missing required parameter userId when calling updateUser');
  }
  // verify required parameter 'role' is set
  if (!role) {
    throw new Error('Missing required parameter role when calling updateUser');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: role,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
