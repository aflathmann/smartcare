/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.EventApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * The API for the AAL IOT project
 * Version: 1.0.0
 * Generated by: class io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.EventApi');

goog.require('API.Client.ApiResponse');
goog.require('API.Client.Event');
goog.require('API.Client.Events');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.EventApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('EventApiBasePath') ?
                   /** @type {!string} */ ($injector.get('EventApiBasePath')) :
                   'https://virtserver.swaggerhub.com/XQDEV/smartcare/1.0.0';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('EventApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('EventApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.EventApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * 
 * Create a new event
 * @param {!Event} event 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ApiResponse>}
 */
API.Client.EventApi.prototype.createEvent = function(event, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/events';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'event' is set
  if (!event) {
    throw new Error('Missing required parameter event when calling createEvent');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: event,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get all events
 * @param {!number=} opt_skip Amount of events to skip
 * @param {!number=} opt_limit Maximum amount of events to get
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Events>}
 */
API.Client.EventApi.prototype.getEvents = function(opt_skip, opt_limit, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/events';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_skip !== undefined) {
    queryParameters['skip'] = opt_skip;
  }

  if (opt_limit !== undefined) {
    queryParameters['limit'] = opt_limit;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
